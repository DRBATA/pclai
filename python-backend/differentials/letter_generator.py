"""
Clinical Letter and Action Plan Generator
Produces formatted consultation summaries and patient action plans
"""

from typing import Dict, Any, List
from datetime import datetime


def generate_action_plan(context: Dict[str, Any], differentials: List[Dict], investigations: List[str]) -> str:
    """
    Generate a structured patient action plan
    
    Args:
        context: Clinical context with patient data
        differentials: List of differential diagnoses with probabilities
        investigations: List of recommended investigations
        
    Returns:
        Formatted action plan as markdown
    """
    
    # Extract patient info
    age = context.get("age", "Unknown")
    gender = context.get("gender", "Not specified")
    
    # Build the action plan
    plan = f"""# Patient Action Plan

**Generated:** {datetime.now().strftime("%Y-%m-%d %H:%M")}

---

## Patient Information

"""
    
    # Demographics
    plan += f"- **Age:** {age} years old\n"
    plan += f"- **Gender:** {gender}\n"
    
    # Chief complaint
    if context.get("chief_complaint"):
        plan += f"- **Chief Complaint:** {context['chief_complaint']}\n"
    
    # Reported symptoms
    symptoms = context.get("reported_symptoms", [])
    if symptoms:
        plan += f"\n### Reported Symptoms:\n"
        for symptom in symptoms:
            plan += f"- {symptom}\n"
    
    # Medical history
    medical_history = context.get("medical_history", [])
    if medical_history:
        plan += f"\n### Medical History:\n"
        for condition in medical_history:
            plan += f"- {condition}\n"
    
    # Current medications
    medications = context.get("current_medications", [])
    if medications:
        plan += f"\n### Current Medications:\n"
        for med in medications:
            plan += f"- {med}\n"
    
    # Allergies
    allergies = context.get("allergies", [])
    if allergies:
        plan += f"\n### Allergies:\n"
        for allergy in allergies:
            plan += f"- {allergy}\n"
    
    # Patient concerns and goals
    concerns = context.get("patient_concerns", [])
    if concerns:
        plan += f"\n### Patient Concerns:\n"
        for concern in concerns:
            plan += f"- {concern}\n"
    
    goals = context.get("consultation_goals", [])
    if goals:
        plan += f"\n### Consultation Goals:\n"
        for goal in goals:
            plan += f"- {goal}\n"
    
    # Differential diagnoses
    if differentials:
        plan += f"\n---\n\n## Differential Diagnosis\n\n"
        plan += "Based on the systematic assessment, the most likely diagnoses are:\n\n"
        
        for i, diff in enumerate(differentials[:5], 1):
            plan += f"{i}. **{diff['condition']}** - {diff['percentage']}% probability\n"
    
    # Investigations
    if investigations:
        plan += f"\n---\n\n## Recommended Investigations and Assessments\n\n"
        
        for inv in investigations:
            inv_detail = _get_investigation_details(inv)
            plan += f"### {inv_detail['name']}\n\n"
            plan += f"**Purpose:** {inv_detail['purpose']}\n\n"
            plan += f"**Details:** {inv_detail['details']}\n\n"
    
    # Management plan
    plan += f"\n---\n\n## Management and Treatment Plan\n\n"
    plan += _generate_management_recommendations(context, differentials)
    
    # Follow-up
    plan += f"\n---\n\n## Follow-Up\n\n"
    plan += "### Regular Monitoring:\n"
    plan += "- Schedule follow-up appointments to monitor symptoms and the effectiveness of the treatment plan\n"
    plan += "- Adjust the management plan based on your response to treatment\n\n"
    
    plan += "### Patient Education:\n"
    plan += "- Adhere to the treatment plan and lifestyle modifications as recommended\n"
    plan += "- Recognize symptoms that require immediate medical attention:\n"
    plan += "  - Sudden severe pain\n"
    plan += "  - Inability to urinate\n"
    plan += "  - High fever (>38.5Â°C)\n"
    plan += "  - Visible blood in urine (if new or worsening)\n\n"
    
    # Summary
    plan += f"\n---\n\n## Summary\n\n"
    plan += "This comprehensive plan aims to address your symptoms through a combination of diagnostic "
    plan += "investigations, lifestyle modifications, and potential medical treatments. The goal is to "
    plan += "improve your quality of life and manage any underlying conditions contributing to the symptoms.\n\n"
    
    # Disclaimer
    plan += "---\n\n"
    plan += "*This action plan is generated by an AI assistant for informational purposes only. "
    plan += "It is NOT a substitute for professional medical advice, diagnosis, or treatment. "
    plan += "Always consult with a qualified healthcare provider before making any medical decisions.*\n"
    
    return plan


def _get_investigation_details(investigation_code: str) -> Dict[str, str]:
    """Get detailed information about an investigation"""
    
    investigations_db = {
        "needs_urine_dipstick": {
            "name": "Urinalysis (Urine Dipstick)",
            "purpose": "To check for signs of infection, blood, protein, or other abnormalities in the urine",
            "details": "A simple urine test to rule out urinary tract infections (UTIs) or other urinary conditions. You will be asked to provide a clean-catch midstream urine sample."
        },
        "bladder_diary": {
            "name": "Bladder Diary",
            "purpose": "To track urination patterns, fluid intake, and episodes of incontinence",
            "details": "Record the times and amounts of urination, fluid intake, and any incontinence episodes over a period of 3-7 days. This helps identify patterns and triggers."
        },
        "post_void_residual": {
            "name": "Post-Void Residual (PVR) Measurement",
            "purpose": "To determine if the bladder is emptying completely",
            "details": "This can be done using ultrasound or a catheter to measure the amount of urine left in the bladder after urination. Normal is < 50mL."
        },
        "pelvic_ultrasound": {
            "name": "Pelvic Ultrasound",
            "purpose": "To assess the bladder, kidneys, and any potential impact on the urinary system",
            "details": "A non-invasive imaging test to visualize the pelvic organs and check for abnormalities, stones, or structural issues."
        },
        "needs_psa": {
            "name": "PSA (Prostate-Specific Antigen) Blood Test",
            "purpose": "To screen for prostate conditions including BPH, prostatitis, and prostate cancer",
            "details": "A blood test that measures PSA levels. Elevated levels may indicate prostate enlargement, infection, or cancer. Results must be interpreted with clinical context."
        },
        "needs_prostate_exam": {
            "name": "Digital Rectal Exam (DRE)",
            "purpose": "To assess the size, texture, and any abnormalities of the prostate gland",
            "details": "A physical examination where the doctor inserts a gloved finger into the rectum to feel the prostate. Can detect hard nodules suggestive of cancer."
        },
        "urodynamic_testing": {
            "name": "Urodynamic Testing",
            "purpose": "To evaluate bladder function and diagnose issues such as overactive bladder or incontinence",
            "details": "This test measures how well the bladder and urethra store and release urine. It involves filling the bladder with fluid while monitoring pressures."
        },
        "needs_cystoscopy": {
            "name": "Cystoscopy",
            "purpose": "To examine the inside of the bladder and urethra",
            "details": "A thin tube with a camera (cystoscope) is inserted into the urethra to look for abnormalities, stones, tumors, or signs of inflammation."
        },
        "needs_ct_kidney_ureter_bladder": {
            "name": "CT Kidney-Ureter-Bladder (CT KUB)",
            "purpose": "To visualize the kidneys, ureters, and bladder for stones, masses, or structural abnormalities",
            "details": "A specialized CT scan without contrast that is excellent for detecting kidney stones and visualizing the urinary tract anatomy."
        },
        "needs_testicular_exam": {
            "name": "Testicular Examination",
            "purpose": "To assess for lumps, swelling, or abnormalities in the testicles",
            "details": "A physical examination to check for testicular masses, hernias, or signs of torsion. Urgent if sudden pain present."
        },
        "see_sexual_health_clinic": {
            "name": "Sexual Health Clinic Referral",
            "purpose": "For comprehensive STI screening and treatment",
            "details": "A referral to a specialized sexual health clinic for testing, treatment, and partner notification if indicated."
        }
    }
    
    return investigations_db.get(investigation_code, {
        "name": investigation_code.replace("_", " ").title(),
        "purpose": "Further diagnostic evaluation",
        "details": "As recommended by your healthcare provider"
    })


def _generate_management_recommendations(context: Dict[str, Any], differentials: List[Dict]) -> str:
    """Generate management recommendations based on likely diagnoses"""
    
    if not differentials:
        return "Management recommendations will be determined after investigations are complete.\n"
    
    top_condition = differentials[0]["condition_id"] if differentials else ""
    
    recommendations = ""
    
    # UTI management
    if "uti" in top_condition:
        recommendations += "### For Urinary Tract Infection:\n\n"
        recommendations += "**Lifestyle Modifications:**\n"
        recommendations += "- Increase fluid intake (2-3 liters per day)\n"
        recommendations += "- Cranberry supplements may help prevent recurrence\n"
        recommendations += "- Wipe front to back (for women)\n"
        recommendations += "- Urinate after sexual activity\n\n"
        
        recommendations += "**Medications:**\n"
        recommendations += "- Antibiotics: Typically Trimethoprim or Nitrofurantoin for 3-7 days\n"
        recommendations += "- Pain relief: Paracetamol or ibuprofen for dysuria\n\n"
    
    # BPH management
    elif "bph" in top_condition:
        recommendations += "### For Benign Prostatic Hyperplasia (BPH):\n\n"
        recommendations += "**Lifestyle Modifications:**\n"
        recommendations += "- Reduce caffeine and alcohol intake\n"
        recommendations += "- Avoid drinking large amounts before bedtime\n"
        recommendations += "- Double voiding technique\n"
        recommendations += "- Bladder training exercises\n\n"
        
        recommendations += "**Medications:**\n"
        recommendations += "- **Alpha-blockers** (e.g., Tamsulosin): Relax prostate smooth muscle, work within days\n"
        recommendations += "- **5-Alpha Reductase Inhibitors** (e.g., Finasteride): Shrink prostate over 6-12 months\n"
        recommendations += "- Combination therapy for larger prostates\n\n"
        
        recommendations += "**Surgery:**\n"
        recommendations += "- Only if medications fail or complications develop (retention, kidney damage)\n"
        recommendations += "- 60-80% of men improve with medications alone\n\n"
    
    # Overactive bladder
    elif "overactive" in top_condition:
        recommendations += "### For Overactive Bladder:\n\n"
        recommendations += "**Lifestyle Modifications:**\n"
        recommendations += "- Bladder training: Gradually increase time between voids\n"
        recommendations += "- Fluid management: Monitor intake, reduce evening fluids\n"
        recommendations += "- Avoid caffeine and alcohol\n\n"
        
        recommendations += "**Pelvic Floor Exercises:**\n"
        recommendations += "- Kegel exercises to strengthen pelvic floor muscles\n"
        recommendations += "- Can significantly improve bladder control\n\n"
        
        recommendations += "**Medications:**\n"
        recommendations += "- Anticholinergics or Beta-3 agonists if behavioral therapy insufficient\n\n"
    
    # Kidney stones
    elif "kidney_stones" in top_condition:
        recommendations += "### For Kidney Stones:\n\n"
        recommendations += "**Immediate Management:**\n"
        recommendations += "- **Pain control:** NSAIDs (ibuprofen) or stronger pain relief\n"
        recommendations += "- **Hydration:** Drink 2-3 liters of water daily to help pass the stone\n\n"
        
        recommendations += "**Monitoring:**\n"
        recommendations += "- Most stones < 5mm pass spontaneously within 48 hours\n"
        recommendations += "- Strain urine to catch the stone for analysis\n\n"
        
        recommendations += "**Referral:**\n"
        recommendations += "- Urology referral if stone > 6mm or not passing\n"
        recommendations += "- Emergency if complete obstruction or infection\n\n"
    
    # Generic recommendations
    else:
        recommendations += "### General Management:\n\n"
        recommendations += "- Treatment plan will be tailored based on investigation results\n"
        recommendations += "- Lifestyle modifications as appropriate for symptoms\n"
        recommendations += "- Symptomatic relief with over-the-counter medications\n"
        recommendations += "- Specialist referral if indicated\n\n"
    
    # Specialist referrals
    recommendations += "### Referral to Specialist:\n\n"
    recommendations += "- **Urologist:** For further evaluation and management of urinary symptoms\n"
    
    if context.get("gender") == "Female":
        recommendations += "- **Gynecologist:** If pelvic pathology suspected\n"
    
    recommendations += "\n"
    
    return recommendations


def generate_gp_letter(context: Dict[str, Any], differentials: List[Dict], investigations: List[str]) -> str:
    """
    Generate a formal GP referral letter
    
    Args:
        context: Clinical context
        differentials: Differential diagnoses
        investigations: Recommended investigations
        
    Returns:
        Formatted GP letter
    """
    
    letter = f"""
**CLINICAL CONSULTATION SUMMARY**

**Date:** {datetime.now().strftime("%d %B %Y")}

**Patient:** Age {context.get('age', 'Unknown')}, {context.get('gender', 'Not specified')}

---

### Chief Complaint

{context.get('chief_complaint', 'As discussed')}

### History of Presenting Complaint

{context.get('narrative_summary', 'Patient reports symptoms as documented.')}

### Systematic Review (SIQORSTAA)

"""
    
    # Add SIQORSTAA findings if available
    symptom_details = context.get("symptom_details", {})
    if symptom_details:
        for symptom, details in symptom_details.items():
            letter += f"- **{symptom.title()}:** {details}\n"
    else:
        letter += "As documented in consultation.\n"
    
    letter += "\n### Risk Factors and Medical History\n\n"
    letter += f"- **Age:** {context.get('age', 'Unknown')}\n"
    letter += f"- **Gender:** {context.get('gender', 'Not specified')}\n"
    
    medical_history = context.get("medical_history", [])
    if medical_history:
        letter += f"- **Medical History:** {', '.join(medical_history)}\n"
    else:
        letter += "- **Medical History:** None reported\n"
    
    medications = context.get("current_medications", [])
    if medications:
        letter += f"- **Medications:** {', '.join(medications)}\n"
    else:
        letter += "- **Medications:** None\n"
    
    allergies = context.get("allergies", [])
    if allergies:
        letter += f"- **Allergies:** {', '.join(allergies)}\n"
    else:
        letter += "- **Allergies:** None known\n"
    
    # Patient concerns
    concerns = context.get("patient_concerns", [])
    if concerns:
        letter += f"\n- **Patient Concerns:** {', '.join(concerns)}\n"
    
    # Differential diagnosis
    letter += "\n### Differential Diagnosis\n\n"
    if differentials:
        for i, diff in enumerate(differentials[:3], 1):
            letter += f"{i}. **{diff['condition']}** ({diff['percentage']}% probability)\n"
    
    # Assessment
    letter += "\n### Assessment\n\n"
    if differentials:
        top = differentials[0]
        letter += f"Based on clinical presentation, **{top['condition']}** is the most likely diagnosis ({top['percentage']}% probability). "
    letter += "Recommend investigations as outlined below.\n"
    
    # Plan
    letter += "\n### Plan\n\n"
    if investigations:
        letter += "**Investigations:**\n"
        for inv in investigations:
            inv_detail = _get_investigation_details(inv)
            letter += f"- {inv_detail['name']}\n"
    
    letter += "\n**Management:**\n"
    letter += "- As per differential diagnosis above\n"
    letter += "- Safety netting: Return if worsening or new concerning symptoms\n"
    letter += "- Follow-up after investigations complete\n"
    
    # Sign-off
    letter += "\n---\n\n"
    letter += "**Signed:** AI Clinical Assistant System\n\n"
    letter += "*This is a computer-generated consultation summary for informational purposes only. "
    letter += "It is not a substitute for professional medical assessment and should be reviewed by a qualified healthcare provider.*\n"
    
    return letter
